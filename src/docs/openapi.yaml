openapi: 3.0.0
info:
  title: E-Commerce Auth API
  version: 1.0.0
  description: API documentation for authentication endpoints.
servers:
  - url: http://localhost:3000/api/v1
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Email already registered
        '400':
          description: Invalid input
  /auth/login:
    post:
      summary: Login and receive tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
  /auth/refresh:
    post:
      summary: Refresh access and refresh tokens
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Tokens refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid or expired refresh token
  /auth/logout:
    post:
      summary: Logout and revoke refresh token
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: No refresh token provided
  /products:
    get:
      summary: List all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductCard'
    post:
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products/{id}:
    get:
      summary: Get product details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetails'
    put:
      summary: Update a product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      summary: Delete a product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDeleteResponse'
  /products/{id}/details:
    get:
      summary: Get product details with inventory stats
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product details with stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailsWithStats'
  /products/{id}/restock:
    post:
      summary: Restock a product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestockRequest'
      responses:
        '200':
          description: Product restocked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
  /products/{id}/inventory:
    get:
      summary: Get product inventory and transaction summary
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product inventory and transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInventorySummary'
  /products/{id}/inventory/transactions:
    get:
      summary: Get product inventory transaction history with running stock
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: from
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Inventory transaction history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryTransactionWithStock'
  /inventory/stats:
    get:
      summary: Get inventory stats for dashboard
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Inventory stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryStats'
  /inventory/books:
    get:
      summary: Get book inventory table for dashboard
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Book inventory table
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryBook'
  /genres:
    get:
      summary: List all genres
      responses:
        '200':
          description: List of genres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
    post:
      summary: Create a new genre (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Genre created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /audiences:
    get:
      summary: List all audiences
      responses:
        '200':
          description: List of audiences
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Audience'
    post:
      summary: Create a new audience (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Audience created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /genres/{id}/products:
    get:
      summary: List products by genre
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Genre ID
      responses:
        '200':
          description: List of products for the given genre
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductCard'
        '404':
          description: Genre not found
        '500':
          description: Server error
  /audiences/{id}/products:
    get:
      summary: List products by audience
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Audience ID
      responses:
        '200':
          description: List of products for the given audience
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductCard'
        '404':
          description: Audience not found
        '500':
          description: Server error
components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    RefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
        created_at:
          type: string
          format: date-time
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        accessToken:
          type: string
        refreshToken:
          type: string
    ProductCard:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        price:
          type: number
        product_type:
          type: string
        metadata:
          type: object
        images:
          type: array
          items:
            type: string
        genres:
          type: array
          items:
            type: string
        audiences:
          type: array
          items:
            type: string
        stock:
          type: integer
        status:
          type: string
    Product:
      allOf:
        - $ref: '#/components/schemas/ProductCard'
        - type: object
          properties:
            author:
              type: string
    ProductDetails:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            description:
              type: string
    ProductDetailsWithStats:
      allOf:
        - $ref: '#/components/schemas/ProductDetails'
        - type: object
          properties:
            current_stock:
              type: integer
            stats:
              type: object
              properties:
                total_sold:
                  type: integer
                total_restocked:
                  type: integer
                stock_value:
                  type: number
                average_daily_sales:
                  type: number
                days_until_empty:
                  type: integer
            status:
              type: string
    ProductCreateRequest:
      type: object
      properties:
        title:
          type: string
        price:
          type: number
        product_type:
          type: string
        metadata:
          type: object
        images:
          type: array
          items:
            type: string
        genre_ids:
          type: array
          items:
            type: integer
        audience_ids:
          type: array
          items:
            type: integer
        author:
          type: string
    ProductUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/ProductCreateRequest'
    ProductDeleteResponse:
      type: object
      properties:
        id:
          type: integer
        deleted:
          type: boolean
    RestockRequest:
      type: object
      properties:
        quantity:
          type: integer
        reason:
          type: string
    Inventory:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
    ProductInventorySummary:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/InventoryTransaction'
    InventoryTransaction:
      type: object
      properties:
        id:
          type: integer
        product_id:
          type: integer
        change:
          type: integer
        reason:
          type: string
        created_at:
          type: string
          format: date-time
    InventoryTransactionWithStock:
      allOf:
        - $ref: '#/components/schemas/InventoryTransaction'
        - type: object
          properties:
            stock:
              type: integer
    InventoryStats:
      type: object
      properties:
        totalBooks:
          type: integer
        lowStockItems:
          type: integer
        totalValue:
          type: number
        outOfStock:
          type: integer
    InventoryBook:
      type: object
      properties:
        productId:
          type: string
        name:
          type: string
        author:
          type: string
        genres:
          type: array
          items:
            type: string
        price:
          type: number
        stock:
          type: integer
        status:
          type: string
    Genre:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Audience:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 